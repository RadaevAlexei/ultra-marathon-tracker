const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();
const fetch = require('node-fetch');

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const SERVER_URL = process.env.SERVER_URL || 'http://localhost:' + (process.env.PORT || 3000);

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [];

let bot = null;
if (!TOKEN) {
  console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.');
  module.exports = { disabled: true };
} else {
  bot = new TelegramBot(TOKEN, { polling: true });
  console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é (polling)');
}

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const chatState = new Map();

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
function isAdmin(userId) {
  return ADMIN_IDS.length === 0 || ADMIN_IDS.includes(userId);
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: SERVER_URL } }]
    ]
  }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: SERVER_URL } }],
      [
        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–º', callback_data: 'admin_add_km' },
        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä—É–≥–∏', callback_data: 'admin_add_laps' }
      ],
      [
        { text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'admin_reset' },
        { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
      ]
    ]
  }
};

if (bot) {
  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.onText(/\/start/, (msg) => {
    const userId = msg.from.id;
    const userName = msg.from.first_name;
    
    console.log(`üì± User ${userName} (ID: ${userId}) started the bot`);
    
    if (isAdmin(userId)) {
      bot.sendMessage(
        msg.chat.id,
        `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n` +
        `–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞.\n\n` +
        `üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n` +
        `‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å Mini App –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n` +
        `‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä—ã\n` +
        `‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫—Ä—É–≥–∏\n` +
        `‚Ä¢ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n` +
        `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`,
        adminKeyboard
      );
    } else {
      bot.sendMessage(
        msg.chat.id,
        `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n` +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä —Å—É—Ç–æ—á–Ω–æ–≥–æ –∑–∞–±–µ–≥–∞ –®—Ä–∏ –ß–∏–Ω–º–æ—è.\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üèÉ‚Äç‚ôÇÔ∏è`,
        userKeyboard
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /admin
  bot.onText(/\/admin/, (msg) => {
    const userId = msg.from.id;
    
    if (isAdmin(userId)) {
      bot.sendMessage(msg.chat.id, 'üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', adminKeyboard);
    } else {
      bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (data.startsWith('admin_') && !isAdmin(userId)) {
      bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        show_alert: true
      });
      return;
    }

    switch (data) {
      case 'admin_add_km':
        chatState.set(chatId, { action: 'waiting_km' });
        bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2):');
        bot.answerCallbackQuery(callbackQuery.id);
        break;

      case 'admin_add_laps':
        chatState.set(chatId, { action: 'waiting_laps' });
        bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10):');
        bot.answerCallbackQuery(callbackQuery.id);
        break;

      case 'admin_stats':
        try {
          const resp = await fetch(`${SERVER_URL}/api/stats`);
          const stats = await resp.json();
          
          const totalKm = Number(stats.total_km || 0);
          const totalLaps = Math.round(totalKm / 0.4);
          
          bot.sendMessage(
            chatId,
            `üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
            `üèÉ‚Äç‚ôÇÔ∏è –ö–∏–ª–æ–º–µ—Ç—Ä—ã: ${totalKm.toFixed(2)} –∫–º\n` +
            `üîÑ –ö—Ä—É–≥–∏: ${totalLaps} –∫—Ä—É–≥–æ–≤\n` +
            `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${stats.updated_at || 'N/A'}`,
            adminKeyboard
          );
          bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
          bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
          bot.answerCallbackQuery(callbackQuery.id);
        }
        break;

      case 'admin_reset':
        bot.sendMessage(
          chatId,
          '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫ –Ω—É–ª—é?',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', callback_data: 'admin_reset_confirm' },
                  { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }
                ]
              ]
            }
          }
        );
        bot.answerCallbackQuery(callbackQuery.id);
        break;

      case 'admin_reset_confirm':
        try {
          const resp = await fetch(`${SERVER_URL}/api/update_km`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ km: 0 })
          });
          const result = await resp.json();
          
          if (result.success) {
            bot.sendMessage(chatId, '‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω—É–ª—é!', adminKeyboard);
          } else {
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö');
          }
          bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
          bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
          bot.answerCallbackQuery(callbackQuery.id);
        }
        break;

      case 'admin_cancel':
        bot.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', adminKeyboard);
        bot.answerCallbackQuery(callbackQuery.id);
        break;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = (msg.text || '').trim();

    if (text.startsWith('/')) return;

    const state = chatState.get(chatId);
    if (!state) return;

    if (!isAdmin(userId)) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      chatState.delete(chatId);
      return;
    }

    if (state.action === 'waiting_km') {
      const km = Number(text.replace(',', '.'));
      
      if (!Number.isFinite(km) || km < 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.2)');
        return;
      }

      try {
        const statsResp = await fetch(`${SERVER_URL}/api/stats`);
        const stats = await statsResp.json();
        const currentKm = Number(stats.total_km || 0);
        const newKm = currentKm + km;

        const resp = await fetch(`${SERVER_URL}/api/update_km`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ km: newKm })
        });
        const result = await resp.json();

        if (result.success) {
          bot.sendMessage(
            chatId,
            `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${km.toFixed(2)} –∫–º\n\n` +
            `üìä –ë—ã–ª–æ: ${currentKm.toFixed(2)} –∫–º\n` +
            `üìä –°—Ç–∞–ª–æ: ${newKm.toFixed(2)} –∫–º`,
            adminKeyboard
          );
        }
      } catch (error) {
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      } finally {
        chatState.delete(chatId);
      }
    } else if (state.action === 'waiting_laps') {
      const laps = parseInt(text);
      
      if (!Number.isInteger(laps) || laps < 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∫—Ä—É–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)');
        return;
      }

      try {
        const resp = await fetch(`${SERVER_URL}/api/add_laps`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ laps })
        });
        const result = await resp.json();

        if (result.success) {
          const addedKm = laps * 0.4;
          bot.sendMessage(
            chatId,
            `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${laps} –∫—Ä—É–≥–æ–≤ (${addedKm.toFixed(2)} –∫–º)\n\n` +
            `üìä –¢–µ–∫—É—â–∏–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: ${result.total_km.toFixed(2)} –∫–º`,
            adminKeyboard
          );
        }
      } catch (error) {
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      } finally {
        chatState.delete(chatId);
      }
    }
  });
}

module.exports = bot || { disabled: true };