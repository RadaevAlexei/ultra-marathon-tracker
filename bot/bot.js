const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();
const fetch = require('node-fetch');

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const SERVER_URL = process.env.SERVER_URL || 'http://localhost:' + (process.env.PORT || 3000);

let bot = null;
if (!TOKEN) {
  console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.');
  module.exports = { disabled: true };
} else {
  bot = new TelegramBot(TOKEN, { polling: true });
  console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)');
}

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –∂–¥–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
const chatState = new Map(); // chatId -> { waitingForKm: boolean }

const mainKeyboard = {
  reply_markup: {
    keyboard: [[{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂' }]],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
};

if (bot) {
  bot.onText(/\/start/, (msg) => {
    bot.sendMessage(
      msg.chat.id,
      '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂¬ª, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.',
      mainKeyboard
    );
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = (msg.text || '').trim();

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂') {
      chatState.set(chatId, { waitingForKm: true });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.6)');
      return;
    }

    const state = chatState.get(chatId);
    if (state && state.waitingForKm) {
      const km = Number(text.replace(',', '.'));
      if (!Number.isFinite(km) || km <= 0) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.8).');
        return;
      }
      try {
        const resp = await fetch(`${SERVER_URL}/api/update_km`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ km }),
        });
        const data = await resp.json();
        if (data && data.success) {
          bot.sendMessage(
            chatId,
            `–ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ ${km} –∫–º. –¢–µ–∫—É—â–∏–π —Å—É–º–º–∞—Ä–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: ${Number(data.total_km).toFixed(2)} –∫–º`
          );
        } else {
          bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', e);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        chatState.delete(chatId);
      }
    }
  });
}

module.exports = bot || { disabled: true };


