const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();
const fetch = require('node-fetch');

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const SERVER_URL = process.env.SERVER_URL || 'http://localhost:' + (process.env.PORT || 3000);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API URL
function getApiUrl(endpoint) {
  if (SERVER_URL.includes('netlify.app')) {
    // –ù–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Netlify —Ñ—É–Ω–∫—Ü–∏–∏
    return `${SERVER_URL}/.netlify/functions/${endpoint}`;
  } else {
    // –ù–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ API endpoints
    return `${SERVER_URL}/api/${endpoint}`;
  }
}

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [];

let bot = null;
if (!TOKEN) {
  console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.');
  module.exports = { disabled: true };
} else {
  bot = new TelegramBot(TOKEN, { polling: true });
  console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é (polling)');
}

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const chatState = new Map();

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
function isAdmin(userId) {
  return ADMIN_IDS.length === 0 || ADMIN_IDS.includes(userId);
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: SERVER_URL } }],
      [{ text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'user_stats' }]
    ]
  }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–±–µ–∑ Web App –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const adminKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–º', callback_data: 'admin_add_km' },
        { text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'admin_reset' }
      ],
      [
        { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
      ]
    ]
  }
};

if (bot) {
  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.onText(/\/start/, (msg) => {
    const userId = msg.from.id;
    const userName = msg.from.first_name;
    
    console.log(`üì± User ${userName} (ID: ${userId}) started the bot`);
    
    if (isAdmin(userId)) {
      bot.sendMessage(
        msg.chat.id,
        `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n` +
        `–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞.\n\n` +
        `üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n` +
        `‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å Mini App –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n` +
        `‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä—ã\n` +
        `‚Ä¢ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n` +
        `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`,
        adminKeyboard
      );
    } else {
      bot.sendMessage(
        msg.chat.id,
        `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n` +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä —Å—É—Ç–æ—á–Ω–æ–≥–æ –∑–∞–±–µ–≥–∞ –®—Ä–∏ –ß–∏–Ω–º–æ—è.\n\n` +
        `üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n` +
        `‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n` +
        `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–±–µ–≥–∞\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ! üèÉ‚Äç‚ôÇÔ∏è`,
        userKeyboard
      );
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /admin
  bot.onText(/\/admin/, (msg) => {
    const userId = msg.from.id;
    
    if (isAdmin(userId)) {
      bot.sendMessage(msg.chat.id, 'üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', adminKeyboard);
    } else {
      bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (data.startsWith('admin_') && !isAdmin(userId)) {
      bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        show_alert: true
      });
      return;
    }

    switch (data) {
      case 'user_stats':
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞
          const [statsResp, raceTimeResp] = await Promise.all([
            fetch(getApiUrl('data')),
            fetch(getApiUrl('set_race_time'))
          ]);
          
          const stats = await statsResp.json();
          const raceTime = await raceTimeResp.json();
          
          const totalKm = Number(stats.total_km || 0);
          const totalLaps = Math.round(totalKm / 0.4);
          
          // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑—Ä—è–¥
          let rank = '-';
          let rankEmoji = '‚ö™Ô∏è';
          let nextRank = 160;
          let kmToNext = 160 - totalKm;
          
          if (totalKm >= 220) {
            rank = '–ö–ú–°';
            rankEmoji = 'üèÜ';
            nextRank = null;
            kmToNext = 0;
          } else if (totalKm >= 200) {
            rank = '1-–π';
            rankEmoji = 'üî¥';
            nextRank = 220;
            kmToNext = 220 - totalKm;
          } else if (totalKm >= 180) {
            rank = '2-–π';
            rankEmoji = 'üü°';
            nextRank = 200;
            kmToNext = 200 - totalKm;
          } else if (totalKm >= 160) {
            rank = '3-–π';
            rankEmoji = 'üü¢';
            nextRank = 180;
            kmToNext = 180 - totalKm;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
          let raceStart, raceEnd;
          try {
            const raceTimeResp = await fetch(getApiUrl('set_race_time'));
            if (raceTimeResp.ok) {
              const raceTime = await raceTimeResp.json();
              raceStart = new Date(raceTime.race_start);
              raceEnd = new Date(raceTime.race_end);
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞:', error);
          }
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞
          let raceTimeStr = '';
          if (raceStart && raceEnd) {
            const startStr = raceStart.toLocaleString('ru-RU', {
              timeZone: 'Europe/Volgograd',
              day: '2-digit',
              month: '2-digit',
              year: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            });
            
            const endStr = raceEnd.toLocaleString('ru-RU', {
              timeZone: 'Europe/Volgograd',
              day: '2-digit',
              month: '2-digit',
              year: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            });
            
            raceTimeStr = `\n‚è∞ <b>–í—Ä–µ–º—è –∑–∞–±–µ–≥–∞:</b>\n` +
                         `üèÅ –°—Ç–∞—Ä—Ç: ${startStr}\n` +
                         `üèÜ –§–∏–Ω–∏—à: ${endStr}`;
          }
          
          const statsMessage = `üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–µ–≥–∞</b>\n\n` +
                              `üèÉ‚Äç‚ôÇÔ∏è <b>–ü—Ä–æ–±–µ–∂–∞–Ω–æ:</b> ${totalKm.toFixed(2)} –∫–º\n` +
                              `üîÑ <b>–ö—Ä—É–≥–æ–≤:</b> ${totalLaps}\n` +
                              `üèÖ <b>–†–∞–∑—Ä—è–¥:</b> ${rankEmoji} ${rank}\n` +
                              (nextRank ? `üìà <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞:</b> ${kmToNext.toFixed(2)} –∫–º\n` : '') +
                              raceTimeStr;
          
          bot.sendMessage(
            chatId,
            statsMessage,
            { parse_mode: 'HTML' }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
          bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
        bot.answerCallbackQuery(callbackQuery.id);
        break;

      case 'admin_add_km':
        chatState.set(chatId, { action: 'waiting_km' });
        bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2):\n\n‚ö†Ô∏è –≠—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –Ω–µ –¥–æ–±–∞–≤–∏—Ç –∫ —Ç–µ–∫—É—â–µ–º—É!');
        bot.answerCallbackQuery(callbackQuery.id);
        break;


      case 'admin_stats':
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞
          const [statsResp, raceTimeResp] = await Promise.all([
            fetch(getApiUrl('data')),
            fetch(getApiUrl('set_race_time'))
          ]);
          
          const stats = await statsResp.json();
          const raceTime = await raceTimeResp.json();
          
          const totalKm = Number(stats.total_km || 0);
          const totalLaps = Math.round(totalKm / 0.4);
          
          // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑—Ä—è–¥
          let rank = '-';
          let rankEmoji = '‚ö™Ô∏è';
          let nextRank = 160;
          let kmToNext = 160 - totalKm;
          
          if (totalKm >= 220) {
            rank = '–ö–ú–°';
            rankEmoji = 'ÔøΩÔøΩ';
            nextRank = null;
            kmToNext = 0;
          } else if (totalKm >= 200) {
            rank = '1-–π';
            rankEmoji = 'üî¥';
            nextRank = 220;
            kmToNext = 220 - totalKm;
          } else if (totalKm >= 180) {
            rank = '2-–π';
            rankEmoji = 'üü°';
            nextRank = 200;
            kmToNext = 200 - totalKm;
          } else if (totalKm >= 160) {
            rank = '3-–π';
            rankEmoji = 'üü¢';
            nextRank = 180;
            kmToNext = 180 - totalKm;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
          let raceStart, raceEnd;
          try {
            const raceTimeResp = await fetch(getApiUrl('set_race_time'));
            if (raceTimeResp.ok) {
              const raceTime = await raceTimeResp.json();
              raceStart = new Date(raceTime.race_start);
              raceEnd = new Date(raceTime.race_end);
            } else {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              raceStart = new Date('2025-10-01T14:00:00+03:00');
              raceEnd = new Date('2025-10-02T14:00:00+03:00');
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞:', error);
            raceStart = new Date('2025-10-01T14:00:00+03:00');
            raceEnd = new Date('2025-10-02T14:00:00+03:00');
          }

          const now = new Date();
          const elapsedMs = Math.max(0, now - raceStart);
          const elapsedHours = Math.floor(elapsedMs / 3600000);
          const elapsedMinutes = Math.floor((elapsedMs % 3600000) / 60000);
          const elapsedTime = elapsedHours > 0 
            ? `${elapsedHours} —á ${elapsedMinutes} –º–∏–Ω`
            : elapsedHours === 0 && now >= raceStart
              ? `${elapsedMinutes} –º–∏–Ω`
              : '–ù–µ –Ω–∞—á–∞–ª—Å—è';

          // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
          const remainingMs = Math.max(0, raceEnd - now);
          const remainingHours = Math.floor(remainingMs / 3600000);
          const remainingMinutes = Math.floor((remainingMs % 3600000) / 60000);
          const remainingTime = now >= raceEnd
            ? '–ó–∞–≤–µ—Ä—à–µ–Ω'
            : now < raceStart
              ? '–ù–µ –Ω–∞—á–∞–ª—Å—è'
              : `${remainingHours} —á ${remainingMinutes} –º–∏–Ω`;
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const updateDate = new Date(stats.updated_at);
          const dateStr = updateDate.toLocaleString('ru-RU', {
            timeZone: 'Europe/Volgograd',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
          
          // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
          const maxKm = 220;
          const progress = Math.min(100, (totalKm / maxKm) * 100);
          const barLength = 10;
          const filledBars = Math.round((progress / 100) * barLength);
          const progressBar = '‚ñì'.repeat(filledBars) + '‚ñë'.repeat(barLength - filledBars);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ –∑–∞–±–µ–≥–∞
          const raceStartDate = new Date(raceTime.race_start);
          const raceStartStr = raceStartDate.toLocaleDateString('ru-RU', {
            timeZone: 'Europe/Volgograd',
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          });
          
          // –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É)
          let message = `üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ë–ï–ì–ê</b>\n`;
          message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
          
          message += `üèÅ <b>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –∑–∞–±–µ–≥–∞:</b>\n`;
          message += `   ${raceStartStr}\n\n`;
          
          message += `üèÉ‚Äç‚ôÇÔ∏è <b>–ö–∏–ª–æ–º–µ—Ç—Ä—ã:</b>\n`;
          message += `   ${totalKm.toFixed(2)} –∫–º\n\n`;
          
          message += `üîÑ <b>–ö—Ä—É–≥–∏:</b>\n`;
          message += `   ${totalLaps} –∫—Ä—É–≥–æ–≤\n\n`;
          
          message += `${rankEmoji} <b>–†–∞–∑—Ä—è–¥:</b>\n`;
          message += `   ${rank}\n\n`;
          
          if (nextRank) {
            message += `üéØ <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞:</b>\n`;
            message += `   ${kmToNext.toFixed(1)} –∫–º (–¥–æ ${nextRank} –∫–º)\n\n`;
          } else {
            message += `üèÜ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä—è–¥!</b>\n\n`;
          }
          
          message += `‚è± <b>–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n`;
          message += `   ${elapsedTime}\n\n`;

          message += `‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b>\n`;
          message += `   ${remainingTime}\n\n`;
          
          message += `üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –ö–ú–°:</b>\n`;
          message += `   ${progressBar} ${progress.toFixed(0)}%\n\n`;
          
          message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
          message += `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${dateStr}`;
          
          bot.sendMessage(chatId, message, {
            ...adminKeyboard,
            parse_mode: 'HTML'
          });
          bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
          bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
          bot.answerCallbackQuery(callbackQuery.id);
        }
        break;

      case 'admin_reset':
        bot.sendMessage(
          chatId,
          '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫ –Ω—É–ª—é?',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', callback_data: 'admin_reset_confirm' },
                  { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }
                ]
              ]
            }
          }
        );
        bot.answerCallbackQuery(callbackQuery.id);
        break;

      case 'admin_reset_confirm':
        try {
          const resp = await fetch(getApiUrl('data'), {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ reset: true })
          });
          const result = await resp.json();
          
          if (result.success) {
            bot.sendMessage(chatId, '‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω—É–ª—é!\n\nüìä –ö–∏–ª–æ–º–µ—Ç—Ä—ã: 0\nüîÑ –ö—Ä—É–≥–∏: 0', adminKeyboard);
          } else {
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö');
          }
          bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
          bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö');
          bot.answerCallbackQuery(callbackQuery.id);
        }
        break;

      case 'admin_cancel':
        bot.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', adminKeyboard);
        bot.answerCallbackQuery(callbackQuery.id);
        break;
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = (msg.text || '').trim();

    if (text.startsWith('/')) return;

    const state = chatState.get(chatId);
    if (!state) return;

    if (!isAdmin(userId)) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      chatState.delete(chatId);
      return;
    }

    if (state.action === 'waiting_km') {
      const km = Number(text.replace(',', '.'));
      
      if (!Number.isFinite(km) || km < 0) {
        bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.2)');
        return;
      }

        try {
          const resp = await fetch(getApiUrl('data'), {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ kmNumber: km })
          });
          const result = await resp.json();

        if (result.success) {
          const totalKm = Number(result.total_km || 0);
          const totalLaps = Math.round(totalKm / 0.4);
          
          bot.sendMessage(
            chatId,
            `‚úÖ –ö–∏–ª–æ–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n` +
            `üìä <b>–ö–∏–ª–æ–º–µ—Ç—Ä—ã:</b> ${totalKm.toFixed(2)} –∫–º\n` +
            `üîÑ <b>–ö—Ä—É–≥–æ–≤:</b> ${totalLaps}\n\n` +
            `–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!`,
            { parse_mode: 'HTML', ...adminKeyboard }
          );
        } else {
          bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      } finally {
        chatState.delete(chatId);
      }
    }
  });
}

module.exports = bot || { disabled: true };