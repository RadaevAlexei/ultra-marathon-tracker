const fetch = require('node-fetch');

exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
  };

  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: '',
    };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' }),
    };
  }

  try {
    const update = JSON.parse(event.body);
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (Date.now() - update.message?.date * 1000 > 60000) {
      return { statusCode: 200, headers, body: 'OK' };
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    userStates = await getUserStates();

    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const serverUrl = process.env.SERVER_URL || 'https://ultra-marathon-tracker.netlify.app';
    const adminIds = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [];

    if (!botToken) {
      console.error('TELEGRAM_BOT_TOKEN not found in environment variables');
      return { statusCode: 500, headers, body: 'Bot token not configured' };
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessage = async (chatId, text, options = {}) => {
      const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
      const payload = {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      };
      
      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        return await response.json();
      } catch (error) {
        console.error('Error sending message:', error);
        return null;
      }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
    const answerCallbackQuery = async (callbackQueryId, text = '') => {
      const url = `https://api.telegram.org/bot${botToken}/answerCallbackQuery`;
      const payload = {
        callback_query_id: callbackQueryId,
        text
      };
      
      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        return await response.json();
      } catch (error) {
        console.error('Error answering callback query:', error);
        return null;
      }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    const isAdmin = (userId) => adminIds.includes(userId);
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    const fs = require('fs').promises;
    const path = require('path');
    const STATES_FILE = '/tmp/user_states.json';
    
    async function getUserStates() {
      try {
        const data = await fs.readFile(STATES_FILE, 'utf8');
        return JSON.parse(data);
      } catch (error) {
        return {};
      }
    }
    
    async function saveUserStates(states) {
      try {
        await fs.writeFile(STATES_FILE, JSON.stringify(states, null, 2));
        return true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error);
        return false;
      }
    }
    
    let userStates = {};

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const userKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }]
        ]
      }
    };

    const adminKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–º', callback_data: 'admin_add_km' },
            { text: 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä—É–≥–æ–≤', callback_data: 'admin_add_laps' }
          ],
          [
            { text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'admin_reset' },
            { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
          ],
          [
            { text: '‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞', callback_data: 'admin_set_race_time' }
          ]
        ]
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message) {
      const chatId = update.message.chat.id;
      const userId = update.message.from.id;
      const text = update.message.text;

      console.log(`üì± Message from ${userId}: ${text}`);

      if (text === '/start') {
        const keyboard = isAdmin(userId) ? adminKeyboard : userKeyboard;
        await sendMessage(chatId, 'üèÉ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä —É–ª—å—Ç—Ä–∞–º–∞—Ä–∞—Ñ–æ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
      } else if (text === '/admin') {
        if (isAdmin(userId)) {
          await sendMessage(chatId, 'üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', adminKeyboard);
        } else {
          await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
      } else if (isAdmin(userId)) {
        const userState = userStates[userId];
        
        if (userState === 'setting_race_time') {
          // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
          const timeRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/;
          const match = text.match(timeRegex);
          
          if (!match) {
            await sendMessage(chatId, 
              '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏!\n\n' +
              '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n' +
              '–ü—Ä–∏–º–µ—Ä: <code>01.10.2025 14:00</code>',
              { parse_mode: 'HTML' }
            );
            return;
          }

          const [, day, month, year, hour, minute] = match;
          const raceStart = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}T${hour.padStart(2, '0')}:${minute}:00+03:00`);
          const raceEnd = new Date(raceStart.getTime() + 24 * 60 * 60 * 1000); // +24 —á–∞—Å–∞

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–∞–∑—É–º–Ω–∞—è (–Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º)
          const now = new Date();
          const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
          const oneYearFromNow = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);
          
          if (raceStart < oneWeekAgo) {
            await sendMessage(chatId, '‚ùå –í—Ä–µ–º—è –∑–∞–±–µ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ –ø—Ä–æ—à–ª–æ–º!');
            return;
          }
          
          if (raceStart > oneYearFromNow) {
            await sendMessage(chatId, '‚ùå –í—Ä–µ–º—è –∑–∞–±–µ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –≥–æ–¥ –≤ –±—É–¥—É—â–µ–º!');
            return;
          }

          try {
            const response = await fetch(`${serverUrl}/.netlify/functions/set_race_time`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                race_start: raceStart.toISOString(),
                race_end: raceEnd.toISOString()
              })
            });
            const result = await response.json();

            if (result.success) {
              const startStr = raceStart.toLocaleString('ru-RU', {
                timeZone: 'Europe/Volgograd',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              });
              
              const endStr = raceEnd.toLocaleString('ru-RU', {
                timeZone: 'Europe/Volgograd',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              });

              await sendMessage(chatId,
                `‚úÖ –í—Ä–µ–º—è –∑–∞–±–µ–≥–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
                `üèÅ <b>–°—Ç–∞—Ä—Ç:</b> ${startStr}\n` +
                `üèÜ <b>–§–∏–Ω–∏—à:</b> ${endStr}\n\n` +
                `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 24 —á–∞—Å–∞`,
                { parse_mode: 'HTML', ...adminKeyboard }
              );
            } else {
              await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞');
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞:', error);
            await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏');
          } finally {
            delete userStates[userId];
            await saveUserStates(userStates);
          }
        } else if (!isNaN(parseFloat(text))) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–º/–∫—Ä—É–≥–æ–≤
          const number = parseFloat(text);
          if (number > 0) {
            try {
              let response;
              let successMessage;
              
              if (userState === 'adding_laps') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥–∏
                console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä—É–≥–∏: ${number}`);
                const requestBody = { lapsNumber: number };
                console.log(`üì§ Request body:`, requestBody);
                
                response = await fetch(`${serverUrl}/.netlify/functions/data`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(requestBody)
                });
                // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –∏–∑ API
                successMessage = null;
              } else if (userState === 'adding_km') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∏–ª–æ–º–µ—Ç—Ä—ã
                console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∏–ª–æ–º–µ—Ç—Ä—ã: ${number}`);
                const requestBody = { kmNumber: number };
                console.log(`üì§ Request body:`, requestBody);
                
                response = await fetch(`${serverUrl}/.netlify/functions/data`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(requestBody)
                });
                // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –∏–∑ API
                successMessage = null;
              } else {
                // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                console.log(`‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userState}`);
                await sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é');
                return;
              }
              
              if (response.ok) {
                const result = await response.json();
                // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ API
                await sendMessage(chatId, result.message, adminKeyboard);
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                delete userStates[userId];
                await saveUserStates(userStates);
              } else {
                await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
              }
            } catch (error) {
              console.error('Error updating data:', error);
              await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
          }
        }
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
    if (update.callback_query) {
      const chatId = update.callback_query.message.chat.id;
      const userId = update.callback_query.from.id;
      const data = update.callback_query.data;

      console.log(`üîò Callback from ${userId}: ${data}`);

      switch (data) {
        case 'admin_add_km':
          if (isAdmin(userId)) {
            userStates[userId] = 'adding_km';
            await saveUserStates(userStates);
            await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', { reply_markup: { remove_keyboard: true } });
          } else {
            await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
          }
          await answerCallbackQuery(update.callback_query.id);
          break;

        case 'admin_add_laps':
          if (isAdmin(userId)) {
            userStates[userId] = 'adding_laps';
            await saveUserStates(userStates);
            await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', { reply_markup: { remove_keyboard: true } });
          } else {
            await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
          }
          await answerCallbackQuery(update.callback_query.id);
          break;

        case 'admin_set_race_time':
          if (isAdmin(userId)) {
            userStates[userId] = 'setting_race_time';
            await saveUserStates(userStates);
            await sendMessage(chatId, 
              '‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–±–µ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
              'üìÖ <b>–î–∞—Ç–∞:</b> –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.10.2025)\n' +
              'üïê <b>–í—Ä–µ–º—è:</b> –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00)\n\n' +
              '–ü—Ä–∏–º–µ—Ä: <code>01.10.2025 14:00</code>\n\n' +
              '–ó–∞–±–µ–≥ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è 24 —á–∞—Å–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.',
              { parse_mode: 'HTML', reply_markup: { remove_keyboard: true } }
            );
          } else {
            await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
          }
          await answerCallbackQuery(update.callback_query.id);
          break;

        case 'admin_reset':
          if (isAdmin(userId)) {
            await sendMessage(chatId, 
              '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫ –Ω—É–ª—é?',
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: '‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', callback_data: 'admin_reset_confirm' },
                      { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_cancel' }
                    ]
                  ]
                }
              }
            );
          } else {
            await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
          }
          await answerCallbackQuery(update.callback_query.id);
          break;

        case 'admin_reset_confirm':
          if (isAdmin(userId)) {
            try {
              const response = await fetch(`${serverUrl}/.netlify/functions/data`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reset: true })
              });
              
              if (response.ok) {
                const result = await response.json();
                await sendMessage(chatId, '‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω—É–ª—é!\n\nüìä –ö–∏–ª–æ–º–µ—Ç—Ä—ã: 0\nüîÑ –ö—Ä—É–≥–∏: 0', adminKeyboard);
              } else {
                await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö');
              }
            } catch (error) {
              console.error('Error resetting data:', error);
              await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö');
            }
          } else {
            await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
          }
          await answerCallbackQuery(update.callback_query.id);
          break;

        case 'admin_cancel':
          await sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', adminKeyboard);
          await answerCallbackQuery(update.callback_query.id);
          break;

        case 'admin_stats':
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞
          const [statsResp, raceTimeResp] = await Promise.all([
            fetch(`${serverUrl}/.netlify/functions/data`),
            fetch(`${serverUrl}/.netlify/functions/set_race_time`)
          ]);
          
          const stats = await statsResp.json();
          const raceTime = await raceTimeResp.json();
            
            const totalKm = Number(stats.total_km || 0);
            const totalLaps = Math.round(totalKm / 0.4);
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑—Ä—è–¥
            let rank = '-';
            let rankEmoji = '‚ö™Ô∏è';
            let nextRank = 160;
            let kmToNext = 160 - totalKm;
            
            if (totalKm >= 220) {
              rank = '–ö–ú–°';
              rankEmoji = 'üü£';
              nextRank = null;
              kmToNext = 0;
            } else if (totalKm >= 200) {
              rank = '1-–π';
              rankEmoji = 'üî¥';
              nextRank = 220;
              kmToNext = 220 - totalKm;
            } else if (totalKm >= 180) {
              rank = '2-–π';
              rankEmoji = 'üü°';
              nextRank = 200;
              kmToNext = 200 - totalKm;
            } else if (totalKm >= 160) {
              rank = '3-–π';
              rankEmoji = 'üü¢';
              nextRank = 180;
              kmToNext = 180 - totalKm;
            }
            
          // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
          let raceStart, raceEnd;
          try {
            const raceTimeResp = await fetch(`${serverUrl}/.netlify/functions/set_race_time`);
            if (raceTimeResp.ok) {
              const raceTime = await raceTimeResp.json();
              raceStart = new Date(raceTime.race_start);
              raceEnd = new Date(raceTime.race_end);
            } else {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              raceStart = new Date('2025-10-01T14:00:00+03:00');
              raceEnd = new Date('2025-10-02T14:00:00+03:00');
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞:', error);
            raceStart = new Date('2025-10-01T14:00:00+03:00');
            raceEnd = new Date('2025-10-02T14:00:00+03:00');
          }

          const now = new Date();
          const elapsedMs = Math.max(0, now - raceStart);
          const elapsedHours = Math.floor(elapsedMs / 3600000);
          const elapsedMinutes = Math.floor((elapsedMs % 3600000) / 60000);
          const elapsedTime = elapsedHours > 0 
            ? `${elapsedHours} —á ${elapsedMinutes} –º–∏–Ω`
            : elapsedHours === 0 && now >= raceStart
              ? `${elapsedMinutes} –º–∏–Ω`
              : '–ù–µ –Ω–∞—á–∞–ª—Å—è';

          // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
          const remainingMs = Math.max(0, raceEnd - now);
          const remainingHours = Math.floor(remainingMs / 3600000);
          const remainingMinutes = Math.floor((remainingMs % 3600000) / 60000);
          const remainingTime = now >= raceEnd
            ? '–ó–∞–≤–µ—Ä—à–µ–Ω'
            : now < raceStart
              ? '–ù–µ –Ω–∞—á–∞–ª—Å—è'
              : `${remainingHours} —á ${remainingMinutes} –º–∏–Ω`;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const updateDate = new Date(stats.updated_at);
            const dateStr = updateDate.toLocaleString('ru-RU', {
              timeZone: 'Europe/Volgograd',
              day: '2-digit',
              month: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit'
            });
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            const maxKm = 220;
            const progress = Math.min(100, (totalKm / maxKm) * 100);
            const barLength = 10;
            const filledBars = Math.round((progress / 100) * barLength);
            const progressBar = '‚ñì'.repeat(filledBars) + '‚ñë'.repeat(barLength - filledBars);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ –∑–∞–±–µ–≥–∞
            const raceStartDate = new Date(raceTime.race_start);
            const raceStartStr = raceStartDate.toLocaleDateString('ru-RU', {
              timeZone: 'Europe/Volgograd',
              day: '2-digit',
              month: '2-digit',
              year: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            });
            
            // –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            let message = `üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ë–ï–ì–ê</b>\n`;
            message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
            
            message += `üèÅ <b>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –∑–∞–±–µ–≥–∞:</b>\n`;
            message += `   ${raceStartStr}\n\n`;
            
            message += `üèÉ‚Äç‚ôÇÔ∏è <b>–ö–∏–ª–æ–º–µ—Ç—Ä—ã:</b>\n`;
            message += `   ${totalKm.toFixed(2)} –∫–º\n\n`;
            
            message += `üîÑ <b>–ö—Ä—É–≥–∏:</b>\n`;
            message += `   ${totalLaps} –∫—Ä—É–≥–æ–≤\n\n`;
            
            message += `${rankEmoji} <b>–†–∞–∑—Ä—è–¥:</b>\n`;
            message += `   ${rank}\n\n`;
            
            if (nextRank) {
              message += `üéØ <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞:</b>\n`;
              message += `   ${kmToNext.toFixed(1)} –∫–º (–¥–æ ${nextRank} –∫–º)\n\n`;
            } else {
              message += `üèÜ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä—è–¥!</b>\n\n`;
            }
            
            message += `‚è± <b>–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:</b>\n`;
            message += `   ${elapsedTime}\n\n`;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏" —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞
            if (now >= raceStart && now < raceEnd) {
              message += `‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b>\n`;
              message += `   ${remainingTime}\n\n`;
            }
            
            message += `üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –ö–ú–°:</b>\n`;
            message += `   ${progressBar} ${progress.toFixed(0)}%\n\n`;
            
            message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
            message += `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${dateStr}`;
            
            const keyboard = isAdmin(userId) ? adminKeyboard : userKeyboard;
            await sendMessage(chatId, message, keyboard);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
          }
          await answerCallbackQuery(update.callback_query.id);
          break;

        default:
          await answerCallbackQuery(update.callback_query.id);
      }
    }

    return {
      statusCode: 200,
      headers,
      body: 'OK',
    };

  } catch (error) {
    console.error('Webhook error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: error.message }),
    };
  }
};
