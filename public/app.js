// –í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+3 –∫—Ä—É–≥–ª—ã–π –≥–æ–¥)
const VOLGOGRAD_TZ = 'Europe/Volgograd';

console.log('üöÄ Mini App –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞
let RACE_START = new Date('2025-10-01T14:00:00+03:00'); // –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let RACE_END = new Date('2025-10-02T14:00:00+03:00'); // –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function fetchRaceTime() {
  try {
    const response = await fetch('/.netlify/functions/set_race_time');
    if (response.ok) {
      const raceTime = await response.json();
      RACE_START = new Date(raceTime.race_start);
      RACE_END = new Date(raceTime.race_end);
      console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–±–µ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', {
        start: RACE_START.toLocaleString('ru-RU', { timeZone: 'Europe/Volgograd' }),
        end: RACE_END.toLocaleString('ru-RU', { timeZone: 'Europe/Volgograd' })
      });
    } else {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ–≥–∞:', error);
  }
}
const LAP_LENGTH_KM = 0.4; // 400 –º

const totalKmEl = document.getElementById('totalKilometers');
const directionTextEl = document.getElementById('directionText');
const progressFillNewEl = document.getElementById('progressFillNew');

const timerElapsedEl = document.createElement('div');
timerElapsedEl.className = 'timer-elapsed';

const timerContainer = document.createElement('section');
timerContainer.className = 'timer-section';
timerContainer.innerHTML = `
  <div id="untilStartItem" class="stat-block start-block" style="margin-bottom:12px;">
    <div class="block-title">–î–æ —Å—Ç–∞—Ä—Ç–∞</div>
    <div class="stat-card center start-card">
      <div class="stat-value start-value" id="untilStart">--:--:--</div>
    </div>
  </div>
  <div id="elapsedItem" class="stat-block start-block" style="display:none; margin-bottom:12px;">
    <div class="block-title">–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ <span id="liveBadge" class="badge-live" style="display:none;">LIVE</span></div>
    <div class="stat-card center live-card">
      <div class="stat-value start-value" id="elapsed">00:00:00</div>
    </div>
  </div>
`;
document.querySelector('.app-container').insertBefore(timerContainer, document.querySelector('.header').nextSibling);

function formatHHMMSS(ms) {
  const totalSec = Math.max(0, Math.floor(ms / 1000));
  const hh = String(Math.floor(totalSec / 3600)).padStart(2, '0');
  const mm = String(Math.floor((totalSec % 3600) / 60)).padStart(2, '0');
  const ss = String(totalSec % 60).padStart(2, '0');
  return `${hh}:${mm}:${ss}`;
}

function formatDHMS(ms) {
  const totalSec = Math.max(0, Math.floor(ms / 1000));
  const days = Math.floor(totalSec / 86400);
  const hours = Math.floor((totalSec % 86400) / 3600);
  const minutes = Math.floor((totalSec % 3600) / 60);
  const seconds = totalSec % 60;
  const parts = [];
  if (days > 0) parts.push(`${days} –¥`);
  parts.push(`${hours} —á`, `${minutes} –º–∏–Ω`, `${seconds} —Å–µ–∫`);
  return parts.join(' ');
}

function computeForecastKm(currentKm, elapsedHours) {
  if (elapsedHours <= 0) return 0;
  return (currentKm / elapsedHours) * 24;
}

function computeDirectionAndLap(totalKm) {
  if (totalKm <= 0) return { direction: '–ü–æ —á–∞—Å–æ–≤–æ–π', directionAlt: '–ü—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π' };
  
  const currentLap = Math.round(totalKm / LAP_LENGTH_KM) + 1;
  const isOddLap = currentLap % 2 === 1;
  
  // –ß–µ—Ä–µ–¥—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –∫—Ä—É–≥–∞ (–∫–∞–∂–¥—ã–π —á–∞—Å)
  if (isOddLap) {
    return { direction: '–ü–æ —á–∞—Å–æ–≤–æ–π', directionAlt: '–ü—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π' };
  } else {
    return { direction: '–ü—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π', directionAlt: '–ü–æ —á–∞—Å–æ–≤–æ–π' };
  }
}

function computeRank(totalKm) {
  if (totalKm >= 220) return { name: '–ö–ú–°', nextAt: null, kmToNext: 0 };
  if (totalKm >= 200) return { name: '1-–π', nextAt: 220, kmToNext: 220 - totalKm };
  if (totalKm >= 180) return { name: '2-–π', nextAt: 200, kmToNext: 200 - totalKm };
  if (totalKm >= 160) return { name: '3-–π', nextAt: 180, kmToNext: 180 - totalKm };
  return { name: '-', nextAt: 160, kmToNext: 160 - totalKm };
}

function updateProgressToNextRank(currentKm) {
  const maxKm = 220; // –ö–ú–°
  const progressPercent = Math.min(100, (currentKm / maxKm) * 100);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  progressFillNewEl.style.width = `${progressPercent.toFixed(1)}%`;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
  const progressPercentageOverlayEl = document.getElementById('progressPercentageOverlay');
  if (progressPercentageOverlayEl) {
    progressPercentageOverlayEl.textContent = `${progressPercent.toFixed(1)}%`;
  }
}

function updateRaceDate() {
  const raceDateEl = document.getElementById('raceDate');
  if (raceDateEl) {
    const startDate = RACE_START.toLocaleDateString('ru-RU', {
      timeZone: 'Europe/Volgograd',
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
    
    const endDate = RACE_END.toLocaleDateString('ru-RU', {
      timeZone: 'Europe/Volgograd',
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
    
    // –ï—Å–ª–∏ –∑–∞–±–µ–≥ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –¥–∞—Ç—É
    if (startDate === endDate) {
      raceDateEl.textContent = startDate;
    } else {
      raceDateEl.textContent = `${startDate} - ${endDate}`;
    }
  }
}


async function fetchStats() {
  const res = await fetch('/.netlify/functions/data');
  if (!res.ok) throw new Error('Failed to fetch stats');
  return res.json();
}

async function refreshUI() {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    const data = await fetchStats();
    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
    const totalKm = Number(data.total_km || 0);
    console.log('üìè –ö–∏–ª–æ–º–µ—Ç—Ä—ã:', totalKm);
    totalKmEl.textContent = totalKm.toFixed(2);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–±–µ–≥–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    updateRaceDate();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)
    const totalLaps = Math.round(totalKm / LAP_LENGTH_KM);
    const totalLapsEl = document.getElementById('totalLaps');
    if (totalLapsEl) {
      totalLapsEl.textContent = totalLaps;
    }

    const now = new Date();
    const elapsedMs = Math.min(RACE_END - RACE_START, Math.max(0, now - RACE_START));
    const elapsedHours = elapsedMs / 3600000;
    document.getElementById('elapsed').textContent = formatHHMMSS(elapsedMs);

    // –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç ¬´–î–æ —Å—Ç–∞—Ä—Ç–∞¬ª –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const untilEl = document.getElementById('untilStart');
    if (untilEl) {
      const untilMs = Math.max(0, RACE_START - now);
      const untilItem = document.getElementById('untilStartItem');
      if (untilMs === 0) {
        untilEl.textContent = '–ó–∞–±–µ–≥ –Ω–∞—á–∞–ª—Å—è!';
        if (untilItem) { untilItem.classList.remove('state-pre'); untilItem.classList.add('state-live'); }
      } else {
        untilEl.textContent = formatDHMS(untilMs);
        if (untilItem) { untilItem.classList.remove('state-live'); untilItem.classList.add('state-pre'); }
      }
    }

    const forecast = computeForecastKm(totalKm, elapsedHours);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const { direction } = computeDirectionAndLap(totalKm);
    directionTextEl.textContent = direction;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑—Ä—è–¥
    const currentRankEl = document.getElementById('currentRank');
    const rankInfo = computeRank(totalKm);
    if (currentRankEl) {
      currentRankEl.textContent = rankInfo.name;
    }
    
    updateProgressToNextRank(totalKm);
    updateRankBlocks(totalKm);
    

    // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
    const untilStartItem = document.getElementById('untilStartItem');
    const elapsedItem = document.getElementById('elapsedItem');
    
    if (untilStartItem && elapsedItem) {
      if (now >= RACE_START) {
        untilStartItem.style.display = 'none';
        elapsedItem.style.display = 'block';
      } else {
        untilStartItem.style.display = 'block';
        elapsedItem.style.display = 'none';
      }
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI:', e);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', e.message);
  }
}

function tickTimer() {
  const now = new Date();
  const elapsedMs = Math.min(RACE_END - RACE_START, Math.max(0, now - RACE_START));
  document.getElementById('elapsed').textContent = formatHHMMSS(elapsedMs);
  // –ü–æ–∫–∞–∑ –±–µ–π–¥–∂–∞ LIVE –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
  const liveBadge = document.getElementById('liveBadge');
  if (liveBadge) {
    if (now >= RACE_START && now < RACE_END) liveBadge.style.display = 'inline-block';
    else liveBadge.style.display = 'none';
  }
  // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
  const untilStartItem = document.getElementById('untilStartItem');
  const elapsedItem = document.getElementById('elapsedItem');
  
  if (untilStartItem && elapsedItem) {
    if (now >= RACE_START) {
      untilStartItem.style.display = 'none';
      elapsedItem.style.display = 'block';
    } else {
      untilStartItem.style.display = 'block';
      elapsedItem.style.display = 'none';
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ —Ä–∞–∑—Ä—è–¥–æ–≤
function updateRankBlocks(totalKm) {
  // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
  const ranks = [
    { id: 'rank3-card', threshold: 160, name: '3-–π —Ä–∞–∑—Ä—è–¥' },
    { id: 'rank2-card', threshold: 180, name: '2-–π —Ä–∞–∑—Ä—è–¥' },
    { id: 'rank1-card', threshold: 200, name: '1-–π —Ä–∞–∑—Ä—è–¥' },
    { id: 'kms-card', threshold: 220, name: '–ö–ú–°' }
  ];
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Ä–∞–∑—Ä—è–¥–∞
  ranks.forEach(rank => {
    const cardElement = document.getElementById(rank.id);
    if (cardElement) {
      if (totalKm >= rank.threshold) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
        cardElement.classList.add('rank-card', 'rank-achieved');
        console.log(`‚úÖ ${rank.name} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! (${totalKm} –∫–º >= ${rank.threshold} –∫–º)`);
      } else {
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
        cardElement.classList.remove('rank-card', 'rank-achieved');
      }
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
  console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –∑–∞–±–µ–≥–∞
  await fetchRaceTime();
  
  // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º UI
  await refreshUI();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  setInterval(refreshUI, 2000); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –±–æ—Ç–∞
  setInterval(tickTimer, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  
  console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initializeApp();


